## code thread for the chi2 test:

## quantities that could be computed in advance:
mock 2pcf and covariance matrix; eBOSS observations
## function parameters: 
1. LRGsigma_Corrfunc.py
	dir      = 
	rscale   = 
	mockdir  = 
	obsfile  = 
	halofile = 
	boxsize  = 2500
	galnum   = 
	rmin     =
	rmax     =
	nbins    =
	nthread  = 64
	autocorr = 1
	mu_max   = 1
	nmu      = 
	zmin     = 
	zmax     = 
	Om       = 

	halo     = read halofile, obtain halo catalogue (real space)
	obs      = read obsfile, obtain LRG observation (redshift space)
	bins     = read bins file according to rscale

	1.1 covmatrix(mockdir, rmin,rmax,zmin,zmax,Om):
[correlation function of 1000 mocks in NGC and 1000 mocks in SGC in the corresponding redshift range] (not completed)
		corr = np.array([mock1;mock2;....mock1000]).T
		cov = np.cov(corr)
		return {covariance matrix} & {multipole of mockes}

	1.2 RR calculation:(solved)
		RR_counts = np.zeros((nbins,1))
		for b in range(nbins):
			RR_counts[b] = 4*np.pi/3*(bins[b+1]**3-bins[b]**3)/(boxsize**3)
		rr=RR_counts.dot(np.ones((1,nmu)))/nmu

	1.3 chi2(galnum,rmin,rmax,sigma,Om,zmin,zmax): 
		vpeak = np.copy(halo['vpeak'])
		vpeak *=1+np.random.normal(scale=sigma,size=len(vpeak))	
		catalog = Table(X,Y,Z,vz,vpeak,vpeak_org)
		galaxy = catalogue.argsort(vpeak)[::-1][:galnum]  # ~120s
		z=(zmin+zmax)/2
		Ode = 1-Om
		H = 100*np.sqrt(Om*(1+z)**3+Ode)
		z_redshift = np.copy(data)
		z_redshift['z']  = (galaxy['Z']+galaxy['vz']*(1+z)/H)
		z_redshift['z'] %=2500
		
[
DDpair = DDsmu(autocorr, nthreads, bins,galaxy['X'],galaxy['Y'],z_redshift['z'],periodic=True, verbose=True,boxsize=boxsize)
DDpair['npairs'][0] -=LRGnum
mono = DD_counts['npairs']/galnum**2/rr.flatten()-1
mu = DD_counts['mu_max']
quad = mono * 2.5 * (3 * mu**2 - 1)
hexa = mono * 1.125 * (35 * mu**4 - 30 * mu**2 + 3)
xi0 = np.trapz(mono.reshape(nbins,nmu), dx=1./nmu, axis=1)
xi2 = np.trapz(quad.reshape(nbins,nmu), dx=1./nmu, axis=1)
xi4 = np.trapz(hexa.reshape(nbins,nmu), dx=1./nmu, axis=1)
] (not verified)
					
		res = obs['col1']-xi0
[quadru and hexadeca?]
		resTcov = res.dot(covariance matrix)
		return resTcov.dot(res)

	1.4 chi2 minimise:
		sigma = Minuit(chi2,Sigma=0.3)
		sigma.migrad()  # run optimiser
		print(sigma.values) 


2.ELG:
	vmax  = 

	2.3 chi2 minimise(galnum,,rmin,rmax,sigma_high,sigma_low,vmax):
		v_max = 1000
		sigma_high = 0.1
		sigma_low = 0.2
		np.random.seed(0)
		time_start=time.time()
		datac3 = np.copy(data)
		datac3['vpeak'] *= 1+np.random.normal(scale=sigma_high,size=len(datac3['vpeak']))
		org3  = data[datac3['vpeak']<v_max]
		tmp_org3 = np.copy(org3['vpeak'])
		tmp_org3*= 1+np.random.normal(scale=sigma_low,size=len(org3['vpeak']))
		tmp_scat3= Table([org3['X'],org3['Y'],org3['Z'],org3['vpeak'],tmp_org3])
		sort_scat3  = tmp_scat3[tmp_scat3['col4'].argsort()]
		LRGscat3 = sort_scat3[::-1][:elgnum]
			
				
